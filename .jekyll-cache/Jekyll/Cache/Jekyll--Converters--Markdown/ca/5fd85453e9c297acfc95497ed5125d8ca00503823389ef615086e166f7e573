I"î7<h1 id="java-fx---charts">Java FX - Charts</h1>

<p>En general, un gr√†fic √©s una representaci√≥ gr√†fica de dades. Existeixen diversos tipus de gr√†fics per a representar dades com el Gr√†fic de barres, Gr√†fic circular, Gr√†fic de l√≠nies, Gr√†fic de dispersi√≥, etc.</p>

<p>JavaFX proporciona suport per a diversos gr√†fics circulars i gr√†fics XY. Els gr√†fics que es representen en un pla XY inclouen AreaChart, BarChart, BubbleChart, LineChart, ScatterChart, StackedAreaChart, StackedBarChart, etc.</p>

<p>Cada gr√†fic est√† representat per una classe i tots aquests gr√†fics pertanyen al paquet javafx.scene.chart. La classe denominada Chart √©s la classe base de tots els gr√†fics en JavaFX i el XYChart √©s la classe base de tots els gr√†fics que es dibuixen en el pla XY.</p>

<p><img src="./images/chart1.jpg" alt="chart" /></p>

<h2 id="creaci√≥-dun-chart">Creaci√≥ d‚Äôun Chart</h2>

<p>Per a crear un gr√†fic, necessitem:</p>

<ul>
  <li>Definir l‚Äôeix del gr√†fic.</li>
  <li>Instanciar la classe respectiva</li>
  <li>Preparar i passar dades al gr√†fic.</li>
</ul>

<h4 id="instanciando-la-respectiva-classe">Instanciando la respectiva classe</h4>

<p>Per a crear un gr√†fic, crea una inst√†ncia de la seua classe respectiva. Per exemple, si desitja crear un gr√†fic de l√≠nies, ha de crear una inst√†ncia de la classe anomenada L√≠nia de la seg√ºent manera:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LineChart linechart = new LineChart (xAxis, yAxis);
</code></pre></div></div>

<blockquote>
  <p>Com la majoria de vegades, a√ßo es pot fer tamb√© en el Scene Builder.</p>
</blockquote>

<p>Com s‚Äôobserva en el codi anterior, en crear inst√†ncies, ha de passar dos objectes que representen els eixos X i Y del gr√†fic, respectivament.</p>

<h4 id="definint-leix">Definint l‚ÄôEix</h4>

<p>En general, l‚Äôeix dels gr√†fics es pot representar mitjan√ßant:</p>

<ul>
  <li>N√∫meros com a Poblaci√≥, Edat i</li>
  <li>Categories com a Dies en una setmana, Pa√Øsos.</li>
</ul>

<p>En JavaFX, un eix √©s una classe abstracta que representa l‚Äôeix X o Y. T√© dues subclasses per a definir cada tipus d‚Äôeix, que s√≥n <strong>CategoryAxis</strong> i <strong>NumberAxis</strong> com es mostra en el seg√ºent diagrama:</p>

<p><img src="./images/chart2.jpg" alt="chart" /></p>

<ul>
  <li><strong>Category Axis</strong>: En crear una inst√†ncia d‚Äôaquesta classe, pot definir (crear) un eix X o Y al llarg del qual cada valor representa una categoria. Pot definir un eix de categoria instanciant aquesta classe com es mostra a continuaci√≥:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CategoryAxis xAxis = new CategoryAxis();
</code></pre></div></div>

<p>Per a aquest eix, ha d‚Äôestablir la llista de categories i etiquetes en l‚Äôeix com es mostra a continuaci√≥:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Establint el llistat de categories.
xAxis.setCategories(FXCollections.&lt;String&gt;observableArrayList
   (Arrays.asList("n ame1", "name2"‚Ä¶.)));

//Establint el label dels eixos
xAxis.setLabel("name of the axis ");
</code></pre></div></div>

<ul>
  <li><strong>NumberAxis</strong>: en crear una inst√†ncia d‚Äôaquesta classe, pot definir (crear) un eix X o Y al llarg del qual cada valor representa un valor num√®ric. Pot usar qualsevol tipus de N√∫mero amb aquest Eix, <strong>Long</strong>, <strong>Double</strong>, <strong>BigDecimal</strong>, etc. Es pot definir un eix num√©ric instanciant aquesta classe de la seg√ºent manera:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Defining the axis 
NumberAxis yAxis = new NumberAxis();

//Setting labelto the axis 
yAxis.setLabel("name of the axis");
</code></pre></div></div>

<h4 id="pasar-les-dades-a-gr√†fics-xy">Pasar les dades a gr√†fics XY</h4>

<p>Tots els gr√†fics XY estan representats al llarg del planol XY. Per a tra√ßar un conjunt de punts en un gr√†fic, necessitem especificar una s√®rie de coordenades XY.</p>

<p>La classe &lt;X, Y&gt; del paquet javafx.scene.chart √©s una classe mitjan√ßant la qual pot enviar dades a un gr√†fic. Aquesta classe cont√© una llista observable de s√®ries amb nom. Pot obtindre aquesta llista utilitzant el m√®tode getData () de la classe XYChart.S√®ries com es mostra a continuaci√≥:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ObservableList list = series.getData();
</code></pre></div></div>

<p>On, s√®ries √©s l‚Äôobjecte de la classe XYChart.S√®ries. Pot agregar dades a aquesta llista utilitzant el m√®tode add () de la seg√ºent manera:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list.add(new XYChart.Data(x-axis data, y-axis data));
</code></pre></div></div>

<p>Aquestes dues l√≠nies es poden escriure juntes com es mostra a continuaci√≥:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>series.getData().add(new XYChart.Data(x-axis data, y-axis data));
</code></pre></div></div>

<p>A continuaci√≥ es proporciona una descripci√≥ de diversos gr√†fics (classes) proporcionats per JavaFX:</p>

<h2 id="pie-chart">Pie Chart</h2>

<p>Un pie chart (gr√†fic circular) √©s una representaci√≥ de valors com a talls d‚Äôun cercle amb diferents colors. Aquestes seccions s‚Äôetiqueten i els valors corresponents a cada secci√≥ es representen en el gr√†fic.</p>

<p>Els constructors de la classe s√≥n:</p>

<ul>
  <li><strong>PieChart()</strong>: crea una inst√†ncia buida de gr√†fic circular.</li>
  <li><strong>PieChart(dades de ObservableList)</strong>: crea una inst√†ncia de gr√†fic circular amb dades donades.</li>
</ul>

<p>A continuaci√≥ es mostra un gr√†fic circular que representa les dades del PIB d‚Äôalguns paisos en 2015.</p>

<p>M√®todes m√©s utilitzats</p>
<ul>
  <li><strong>getData()</strong> retorna les dades del gr√†fic circular</li>
  <li><strong>getLabelLineLength()</strong> retorna la longitud de l‚Äôetiqueta del gr√†fic circular</li>
  <li><strong>getLabelsVisible()</strong> Indica si les etiquetes de tall de past√≠s es dibuixen o no</li>
  <li><strong>getStartAngle()</strong> retorna l‚Äôangle inicial del gr√†fic circular</li>
  <li><strong>isClockwise()</strong> retorna si el gr√†fic circular est√† en sentit horari o no</li>
  <li><strong>setClockwise(boolean v)</strong> estableix l‚Äôorientaci√≥ del gr√†fic circular en sentit horari si es passa el valor vertader</li>
  <li><strong>setData(dades de ObservableList)</strong> Estableix el valor de les dades de propietat.</li>
  <li><strong>setLabelLineLength(doble v)</strong> estableix la longitud de la l√≠nia d‚Äôetiqueta del gr√†fic circular.</li>
  <li><strong>setLabelsVisible(boolean v)</strong> Estableix el valor de la propietat labelsVisible.</li>
  <li><strong>setStartAngle(doble v)</strong> estableix l‚Äôangle d‚Äôinici del gr√†fic circular</li>
</ul>

<p><img src="./images/chart3.png" alt="chart" /></p>

<p>En JavaFX, un pie-Chart est√† representat per una classe anomenada PieChart. Aquesta classe pertany al paquet javafx.scene.chart.</p>

<p>En crear una inst√†ncia d‚Äôaquesta classe, pot crear un node PieChart en JavaFX.</p>

<p>Aquesta classe t√© 5 propietats que s√≥n les seg√ºents:</p>

<ul>
  <li><strong>clockwise</strong>: Aquest √©s un operador boole√†; En configurar aquest operador com a vertader, els segments de dades en els gr√†fics circulars s‚Äôorganitzaran en el sentit de les agulles del rellotge a partir de l‚Äôangle d‚Äôinici del gr√†fic circular.</li>
  <li><strong>data</strong>: representa un objecte ObservableList que cont√© les dades del gr√†fic circular.</li>
  <li><strong>labelLineLength</strong>: un operador sencer que representa la longitud de les l√≠nies que connecten les etiquetes i els sectors del gr√†fic circular.</li>
  <li><strong>labelsVisible</strong>: aquest √©s un operador boole√†; En establir aquest operador com a vertader, es dibuixaran les etiquetes per als gr√†fics circulars. Per defecte, aquest operador est√† configurat per a ser verdader.</li>
  <li><strong>startAngle</strong>: es tracta d‚Äôun operador de tipus doble, que representa l‚Äôangle en el qual s‚Äôinicia el primer talle circular.</li>
</ul>

<p>En aquest exemple, per a generar un gr√†fic circular, prepare un objecte ObservableList com es mostra en el seg√ºent bloc de codi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Preparant l'objecte ObservbleList
ObservableList&lt;PieChart.Data&gt; pieChartData = FXCollections.observableArrayList( 
new PieChart.Data("USA", 17947195), 
new PieChart.Data("EU", 11540278), 
new PieChart.Data("China", 10982829),
new PieChart.Data("Japan", 4116242)
new PieChart.Data("Others", 28584442)); 
</code></pre></div></div>

<p>Despr√©s de preparar l‚Äôobjecte ObservableList, passe-ho com a argument al constructor de la classe PieChart de la seg√ºent forma:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Creating a Pie chart 
PieChart pieChart = new PieChart(pieChartData);
</code></pre></div></div>

<p>O, usant el m√®tode anomenat setData () de la classe anomenada PieChart del paquet anomenat javafx.scene.chart.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pieChart.setData(pieChartData);
</code></pre></div></div>

<p><img src="./images/chart3.gif" alt="chart" /></p>

<p>per posar la llegenda a la part esquerra utilitzem:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pieChart.setLegendSide(Side.LEFT);
</code></pre></div></div>

<h2 id="area-chart">Area Chart</h2>

<p>Els gr√†fics d‚Äô√†rea s‚Äôutilitzen per a dibuixar gr√†fics basats en √†rees. Tra√ßa l‚Äô√†rea entre la s√®rie de punts donada i l‚Äôeix. En general, aquest quadre s‚Äôusa per a comparar dues quantitats.</p>

<p>La seg√ºent data descriu els ingresos mensuals en 2014 i 2015</p>

<p><img src="./images/chart4.png" alt="chart" /></p>

<p>L‚Äôeix X mostra els mesos de l‚Äôany, l‚Äôeix I representa els seus ingressos.</p>

<p><img src="./images/chart5.png" alt="chart" /></p>

<p>Per crear la gr√†fica del exemple:</p>

<p>definim els eixos x i y, aix√≠ com el area xart.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NumberAxis xAxis = new NumberAxis(1, 12, 1);
NumberAxis yAxis = new NumberAxis();
AreaChart&lt;Number, Number&gt; areaChart = new AreaChart&lt;Number, Number&gt;(xAxis, yAxis);
areaChart.setTitle("Revenue");
</code></pre></div></div>

<p>En aquest exemple anem introduint-li les dades de una en una, no  utilitzem un ObservableList. Es f√° igual per al any 2014 que per al 2015.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Series data of 2014
XYChart.Series&lt;Number, Number&gt; series2014 = new XYChart.Series&lt;Number, Number&gt;();
 
series2014.setName("2014");
         
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(1, 400));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(3, 1000));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(4, 1500));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(5, 800));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(7, 500));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(8, 1800));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(10, 1500));
series2014.getData().add(new XYChart.Data&lt;Number, Number&gt;(12, 1300));
</code></pre></div></div>

<h2 id="bar-chart">Bar Chart</h2>

<p>JavaFX BarChart s‚Äôutilitza per a dibuixar un gr√†fic de barres bidimensional amb 2 eixos X e Y. En aquest gr√†fic, un eix denota un grup d‚Äôobjectes interessats i l‚Äôaltre denota dades num√®riques.</p>

<p><img src="./images/chart6.png" alt="chart" /></p>

<p>Per exemple, les dades a continuaci√≥ descriuen la popularitat d‚Äôalguns llenguatges de programaci√≥ en 2014 i 2015.</p>

<p><img src="./images/chart7.png" alt="chart" /></p>

<p>Es pot utilitzar BarChart per a dibuixar el quadre que descriu la popularitat dels llenguatges de programaci√≥ amb les dades esmentades anteriorment. Vegem un exemple il¬∑lustratiu a continuaci√≥:</p>

<p>Definim els eixos X i Y.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CategoryAxis xAxis = new CategoryAxis();
xAxis.setLabel("Programming Language");
 
NumberAxis yAxis = new NumberAxis();
yAxis.setLabel("Percent");
</code></pre></div></div>

<p>Creem el Bar Chart.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Create a BarChart
BarChart&lt;String, Number&gt; barChart = new BarChart&lt;String, Number&gt;(xAxis, yAxis);
</code></pre></div></div>

<p>Introduim les dades per la serie 2014:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Series 1 - Data of 2014
XYChart.Series&lt;String, Number&gt; dataSeries1 = new XYChart.Series&lt;String, Number&gt;();
dataSeries1.setName("2014");
 
dataSeries1.getData().add(new XYChart.Data&lt;String, Number&gt;("Java", 20.973));
dataSeries1.getData().add(new XYChart.Data&lt;String, Number&gt;("C#", 4.429));
dataSeries1.getData().add(new XYChart.Data&lt;String, Number&gt;("PHP", 2.792));
</code></pre></div></div>

<p>Per la serie 2015 s‚Äôintroduirien igual les dades.</p>

<p>Afegim les series al Bar chart:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Add Series to BarChart.
barChart.getData().add(dataSeries1);
barChart.getData().add(dataSeries2);
 
barChart.setTitle("Some Programming Languages");
</code></pre></div></div>

<p><img src="./images/chart8.png" alt="chart" /></p>

<p><a href="../../javafx.html">back</a></p>
:ET