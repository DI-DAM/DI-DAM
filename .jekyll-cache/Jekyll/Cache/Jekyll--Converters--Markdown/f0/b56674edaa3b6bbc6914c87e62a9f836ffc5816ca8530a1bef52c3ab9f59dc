I"‹<h1 id="java-fx---color">Java FX - Color</h1>

<p>En JavaFX tenim la flexibilitat de crear el nostre propi color usant diversos m√®todes i passar-ho com un objecte Paint al m√®tode setFill(). Analitzem els diversos m√®todes per a crear color en JavaFX.</p>

<h2 id="color-rgb">Color RGB</h2>

<p>El sistema de color RGB √©s el m√®tode m√©s popular per a crear un color en gr√†fics. Consta de tres components denominats ROIG ‚Üí R, VERD ‚Üí G i BLAU ‚Üí B. Cada component usa 8 bits, la qual cosa significa que cada component pot tindre un valor sencer de 0 a 22 ^ 8 - 1 = 255.</p>

<p>La pantalla de la computadora pot veure‚Äôs com una col¬∑lecci√≥ de p√≠xels. El conjunt (R, G, B) representa en realitat l‚Äôemissi√≥ dels seus respectius LED en la pantalla.</p>

<p>Si el valor de ROIG s‚Äôestableix en 0, significa que el LED roig est√† apagat mentre que el valor 255 indica que l‚Äôemissi√≥ completa del LED √©s all√≠. La combinaci√≥ de (0,0,0) representa el color negre mentre que (255,255,255) representa el color blanc. Els valors mitjans en aqueix rang poden representar diferents colors.</p>

<p>Usant la superposici√≥ de RGB, podem representar 255 * 255 * 255 colors diferents. En JavaFX, la classe <strong>javafx.scene.paint.Color</strong> representa colors.</p>

<p>Hi ha un m√®tode est√†tic anomenat <strong>rgb()</strong> de la classe Color. Accepta tres arguments sencers com a roig, verd, blau i un argument doble opcional anomenat alfa. El valor <strong>d‚Äôalfa √©s proporcional a l‚Äôopacitat del color</strong>. El valor alfa 0 significa que el color √©s completament transparent, mentre que el valor 1 significa que el color √©s completament opac.</p>

<h2 id="color-name">Color Name</h2>

<p>En JavaFX, tamb√© podem crear el color pel nom del color. La classe javafx.scene.paint.Color cont√© tots els colors com a propietats de la classe. La propietat Color ha de passar-se, com l‚Äôobjecte de la classe Paint.</p>

<h2 id="hsb-color">HSB Color</h2>

<p>Juntament amb els diversos m√®todes que hem vist fins ara, JavaFX tamb√© ens permet crear el color usant HSB que √©s la combinaci√≥ de To, Saturaci√≥ i Lluentor. javafx.scene.paint.Color cont√© un m√®tode est√†tic <strong>Color.hsb()</strong> que accepta tres nombres enters h, s y b.</p>

<h2 id="web-color">Web Color</h2>

<p>La classe javafx.scene.paint.color ens permet crear els colors web usant el m√®tode Color.web(). Aix√≤ pot prendre fins a dos par√†metres, dels quals un √©s el valor hexadecimal del color i l‚Äôaltre √©s un argument opcional anomenat canal alfa que representa l‚Äôopacitat del color.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Color.web("# 0000FF") // Color blau amb alfa impl√≠cit

Color.web ("# 0000FF", 1) // Color blau amb alfa expl√≠cit
</code></pre></div></div>
<p>Alpha √©s un valor de tipus doble que pot contindre valors en el rang de 0.0 a 1.0.</p>

<h1 id="gradient">Gradient</h1>

<p>En gr√†fics per computadora, els colors de degradat (a vegades dits progressi√≥ de color) s‚Äôutilitzen per a especificar els colors dependents de la posici√≥ per a omplir una regi√≥ en particular. El valor del color degradat varia amb la posici√≥. Els colors degradats produeixen les transicions de color suaus a la regi√≥ en variar el valor del color cont√≠nuament amb la posici√≥.</p>

<p>JavaFX ens permet implementar dos tipus de transicions de color de degradat:</p>

<ul>
  <li>Gradient lineal</li>
  <li>Gradient radial</li>
</ul>

<h2 id="linear-gradient">Linear Gradient</h2>

<p>Per a aplicar patrons de degradat lineal a les formes, necessitem crear una inst√†ncia de la classe LinearGradient. Aquesta classe cont√© diversos m√®todes d‚Äôinst√†ncia que es descriuen a continuaci√≥ en la taula.</p>

<ul>
  <li>
    <p>Metodes</p>

    <ul>
      <li><strong>equals(Object o)</strong>: de tipus boolea Compara dos objectes</li>
      <li><strong>getCycleMethod()</strong> Defineix quin m√®tode de cicle s‚Äôha aplicat a LinearGradient.</li>
      <li><strong>getEndX()</strong> de tipus doble: coordenada X del punt final de l‚Äôeix de degradat</li>
      <li><strong>getEndY()</strong> de tipus doble: coordenada Y del punt final de l‚Äôeix de gradient</li>
      <li><strong>getStartX()</strong> de tipus doble: Coordenada X del punt d‚Äôinici de l‚Äôeix de gradient</li>
      <li><strong>getStartY()</strong> de tipus doble: Coordenada Y del punt d‚Äôinici de l‚Äôeix de gradient</li>
      <li><strong>getStops()</strong> del tipus List <Stop>: Defineix la forma de distribucions de colors al llarg del degradat</Stop></li>
      <li><strong>hashCode()</strong> de tipus enter: Retorna el codi hash per a l‚Äôobjecte de gradient lineal</li>
      <li><strong>isOpaque()</strong> de tipus boolea Comprova si la pintura √©s completament opaca o no.</li>
      <li><strong>isProprtional()</strong> de tipus boolea Comprova si les ubicacions inicial i final s√≥n proporcionals o no.</li>
      <li><strong>toString()</strong> Converteix l‚Äôobjecte degradat en una cadena.</li>
    </ul>
  </li>
  <li>
    <p>Constructors</p>

    <ul>
      <li><strong>new LinearGradient(startX, startY, endX, endY, Proportional, CycleMethod, stops)</strong></li>
      <li><strong>(startX, startY)</strong>: representa les coordenades x e y del punt d‚Äôinici del color degradat.</li>
      <li><strong>(endX, endY)</strong>: representa les coordenades x e y del punt final del color degradat.</li>
      <li><strong>Proportional</strong>: aquesta √©s una propietat de tipus boole√†. Si aix√≤ √©s cert, el punt inicial i final del color degradat es tornar√† proporcional.</li>
      <li><strong>CycleMethod</strong>: Aix√≤ defineix el m√®tode de cicle aplicat al gradient.</li>
      <li><strong>Stops</strong>: defineix la distribuci√≥ del color al llarg del degradat.</li>
    </ul>
  </li>
</ul>

<p><img src="./images/linear.png" alt="linear" /></p>

<h2 id="radial-gradient">Radial Gradient</h2>

<p>Per a aplicar degradat radial a les formes, necessitem instanciar la classe javafx.scene.paint.RadialGradient. Aquesta classe cont√© diversos m√®todes d‚Äôinst√†ncia descrits a continuaci√≥:</p>

<ul>
  <li>
    <p>Metodes</p>

    <ul>
      <li><strong>equals(Object o)</strong> de tipus boolea: Compara dos objectes</li>
      <li><strong>getCenterX()</strong> de tipus double: Coordenada X del cercle que defineix el degradat</li>
      <li><strong>getCenterY()</strong> de tipus double: Coordenada Y del cercle que defineix el degradat</li>
      <li><strong>getCycleMethod()</strong>: Defineix quin m√®tode de cicle s‚Äôha aplicat a LinearGradient.</li>
      <li><strong>getFocusAngle()</strong> amb tipus Double: Angle en graus entre el centre del degradat i el focus de la posici√≥ on s‚Äôassigna el primer color</li>
      <li><strong>getFocusDistance()</strong> amb tipus Double: Dist√†ncia entre el centre del degradat i el punt d‚Äôenfocament del primer color.</li>
      <li><strong>getRadius</strong> amb tipus Double: Radi del gradient</li>
      <li><strong>getStops()</strong> amb tipus List <Stop>: Defineix la forma de distribucions de colors al llarg del degradat</Stop></li>
      <li><strong>hashCode()</strong> amb tipus int: Retorna el codi hash per a l‚Äôobjecte de gradient lineal</li>
      <li><strong>isOpaque()</strong> amb tipus boole√†: Comprova si la pintura √©s completament opaca o no.</li>
      <li><strong>isProprtional()</strong> amb tipus boole√†: Comprova si les ubicacions inicial i final s√≥n proporcionals o no.</li>
      <li><strong>toString()</strong> Converteix l‚Äôobjecte degradat en una cadena (string).</li>
    </ul>
  </li>
  <li>
    <p>Constructor</p>
  </li>
</ul>

<p>El constructor de la classe accepta alguns par√†metres.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RadialGradient(double focusAngle, double focusDistance, double centerX, double centerY, double radius, boolean proportional, CycleMethod cycleMethod, Stops? stops)
</code></pre></div></div>

<p><img src="./images/radialGradient.png" alt="radial" /></p>

<p><a href="../../javafx.html">back</a></p>
:ET