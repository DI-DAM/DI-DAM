I"0<hr />
<p>layout: default
‚Äì</p>

<h1 id="historia-metodologia-en-cascada">Historia: Metodologia en cascada</h1>

<p>Existeixen una gran varietat de metodologies per administrar projectes de desnvolupament de Sw. Un dels que m√©s s‚Äôha utilitzat va ser el m√≤del en cascada.  Es tractad‚Äôun m√≤del secuencial on una etapa de desenvolupament no pot iniciar-se fins que l‚Äôetapa anterior no s‚Äôha finalitzat. En particular, les etapes de desenvolupament d‚Äôaquest m√≤del s√≥n:</p>

<p><img src="./images/cascada.jpg" alt="model en cascada" />
Les diferents parts que tenim:
‚Äì  An√†lisi de requisits: on es parla amb el client sobre els requisits i les necessitats. Per tal de identificar els objectius del projecte a desenvolupar. En aquesta etapa es determinen TOTS els requisits que tindr√† el sistema. Encara que en etapes posterior es poden identificar, no podran ser inclosos en el projecte.
‚Äì Disseny:  on es dissenyen tots els m√≤duls del sistema: es dissenya la BB.DD, es defineix l‚Äôarquitectura de dades, etc‚Ä¶ El sistema es descomposa i organitza en elements que poden desenvolupar-se per separat amb el f√≠ de aprofitar les avantatges del desenvolupament en equip. 
  √âs convenient distingir entre disseny d‚Äôalt nivell o arquitect√≤nic i disseny detallat. El primer d‚Äôells t√© com a objectiu definir l‚Äôestructura de la soluci√≥ (una vegada que la fase d‚Äôan√†lisi ha descrit el problema) identificant grans m√≤duls (conjunts de funcions que estaran associades) i les seves relacions. Amb aix√≤ es defineix l‚Äôarquitectura de la soluci√≥ triada. El segon defineix els algorismes emprats i l‚Äôorganitzaci√≥ del codi per a comen√ßar la implementaci√≥.</p>
<ul>
  <li>implementaci√≥: On es codifiquen cadasc√∫n dels m√≤duls, implementant el c√≤di font i fent us de prototips, probes i asjos per corregir errors. Depenent del llenguatge de programaci√≥ i la versi√≥ es poden utilitzar les biblioteques o elements reutilitzables dintre del mateix projecte. Aix√≠ fem que la programaci√≥ siga molt m√©s r√†pida.</li>
  <li>Probes e integraci√≥: √âs el moment on s‚Äôintegren els m√≤dulsi es realitzen les probes unitaries, modulars, integrals i d‚Äôaceptaci√≥.</li>
  <li>Verificaci√≥: on l‚Äôusuari final executa el sistema. A aquesta etapa s‚Äôaplega despres de que els programadors han realitzat exaustives probes per comprobar que el sistema no falla.</li>
  <li>Manteniment: √âs una de les etapes m√©s critiques. En ella es destinen un 75% dels recursos. el seu objectiu es mantenir el software desenvolupat, ja que pot ser que no acomplixca amb totes les nostres expectatives.
 Aquesta metodologia era excesivament rigida. En ella, rarament s‚Äôintroduien canvis en la planificaci√≥ inicial. Ja que implicava el redisseny e implementaci√≥ de totes les parts afectades, augment de costs i duraci√≥ del desenvolupament. 
 Com a soluci√≥, en febrer del 2001. Un grup d‚Äôexperts en l‚Äôindustria del software van crear la alianza √†gil i van publicar el manifest en el que definien formes millors de desenvolupar software. A trav√©s d‚Äôaquest treball van aprendre a valorar cuatre aspectes:
    <ol>
      <li>Individus e interaccions Vs procesos i ferramentes.</li>
      <li>Software funcionant Vs documentaci√≥</li>
      <li>Comunicaci√≥ amb el client Vs negociaci√≥ contractual.</li>
      <li>Resposta al canvi Vs seguir el ‚Äúpla‚Äù
 Encara que es segueixen valorant-se els aspectes de la dreta, es valoren m√©s els aspectes que trobem a l‚Äôesquerra. A partir d‚Äôaquest treball va sorgir l‚Äôenfoque √†gil. On l‚Äôequip que desenvolupa el software √©s multidisciplinar, Autoorganitzat, colaboratiu i amb capacitat de prendre decisions a curt termini.En aquest sentit, han sorgit diferents tecnologies, t√©cniques o frameworks √†gils com pot ser RUP, LEAN, 3x3, Kanban o SCRUM.</li>
    </ol>
  </li>
</ul>

<p><a href="../metiprot.html">back</a></p>
:ET